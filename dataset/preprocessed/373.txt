from __future__ import print_function
import numpy as np
import tensorflow as tf
from six.moves import cPickle as pickle
pickle_file = 'notMNIST.pickle'
with open(pickle_file, 'rb') as f:
    save = pickle.load(f)
    train_datasets = save['train_dataset']
    train_labels = save['train_labels']
    valid_datasets = save['valid_dataset']
    valid_labels = save['valid_labels']
    test_datasets = save['test_dataset']
    test_labels = save['test_labels']
print(train_datasets)
image_size = 28
num_labels = 10


def reformat(dataset, labels):
    dataset = dataset.reshape((-1, image_size * image_size)).astype(np.float32)
    labels = (np.arange(num_labels) == labels[:, (None)]).astype(np.float32)
    return dataset, labels


train_datasets, train_labels = reformat(train_datasets, train_labels)
valid_datasets, valid_labels = reformat(valid_datasets, valid_labels)
test_dataset, test_labels = reformat(test_datasets, test_labels)
print('Training set', train_datasets.shape, train_labels.shape)
print('Validation set', valid_datasets.shape, valid_labels.shape)
print('Test set', test_dataset.shape, test_labels.shape)
train_subset = 10000
beta = 0.01
graph = tf.Graph()
with graph.as_default():
    tf_train_dataset = tf.constant(train_datasets[:train_subset, :])
    tf_train_labels = tf.constant(train_labels[:train_subset])
    tf_valid_dataset = tf.constant(valid_datasets)
    tf_test_dataset = tf.constant(test_dataset)
    weights = tf.Variable(tf.truncated_normal([image_size * image_size, num_labels]))
    baises = tf.Variable(tf.zeros([num_labels]))
    logits = tf.matmul(tf_train_dataset, weights) + baises
    loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels=tf_train_labels, logits=logits))
    l2 = tf.nn.l2_loss(weights)
    loss = tf.reduce_mean(loss + beta * l2)
    optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
    train_prediction = tf.nn.softmax(logits)
    valid_prediction = tf.nn.softmax(tf.matmul(tf_valid_dataset, weights) + baises)
    test_prediction = tf.nn.softmax(tf.matmul(tf_test_dataset, weights) + baises)
    num_steps = 1000


def accuracy(predictions, labels):
    return 100.0 * np.sum(np.argmax(predictions, 1) == np.argmax(labels, 1)) / predictions.shape[0]


with tf.Session(graph=graph) as session:
    tf.global_variables_initializer().run()
    print('Initialized')
    for step in range(num_steps):
        _, l, prediction = session.run([optimizer, loss, train_prediction])
        if step % 100 == 0:
            print('loss at step{}: {}'.format(step, l))
            print('Training accuracy: {:.1f}'.format(accuracy(prediction, train_labels[:train_subset, :])))
            print('Validation accuracy: {:.1f}'.format(accuracy(valid_prediction.eval(), valid_labels)))
    print('Test accuracy: {:.1f}'.format(accuracy(test_prediction.eval(), test_labels)))
num_nodes = 1024
batch_size = 128
beta = 0.01
graph = tf.Graph()
graph = tf.Graph()
with graph.as_default():
    tf_train_dataset = tf.placeholder(tf.float32, shape=(batch_size, image_size * image_size))
    tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
    tf_valid_dataset = tf.constant(valid_datasets)
    tf_test_dataset = tf.constant(test_dataset)
    weights_1 = tf.Variable(tf.truncated_normal([image_size * image_size, num_nodes]))
    biases_1 = tf.Variable(tf.zeros([num_nodes]))
    weights_2 = tf.Variable(tf.truncated_normal([num_nodes, num_labels]))
    biases_2 = tf.Variable(tf.zeros([num_labels]))
    logits_1 = tf.matmul(tf_train_dataset, weights_1) + biases_1
    relu_layer = tf.nn.relu(logits_1)
    logits_2 = tf.matmul(relu_layer, weights_2) + biases_2
    loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits=logits_2, labels=tf_train_labels))
    regularizers = tf.nn.l2_loss(weights_1) + tf.nn.l2_loss(weights_2)
    loss = tf.reduce_mean(loss + beta * regularizers)
    optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
    train_prediction = tf.nn.softmax(logits_2)
    logits_1 = tf.matmul(tf_valid_dataset, weights_1) + biases_1
    relu_layer = tf.nn.relu(logits_1)
    logits_2 = tf.matmul(relu_layer, weights_2) + biases_2
    valid_prediction = tf.nn.softmax(logits_2)
    logits_1 = tf.matmul(tf_test_dataset, weights_1) + biases_1
    relu_layer = tf.nn.relu(logits_1)
    logits_2 = tf.matmul(relu_layer, weights_2) + biases_2
    test_prediction = tf.nn.softmax(logits_2)
num_steps = 3001
with tf.Session(graph=graph) as session:
    tf.initialize_all_variables().run()
    print('Initialized')
    for steps in range(num_steps):
        offset = steps * batch_size % (train_labels.shape[0] - batch_size)
        batch_data = train_datasets[offset:offset + batch_size, :]
        batch_labels = train_labels[offset:offset + batch_size, :]
        feed_dict = {tf_train_dataset: batch_data, tf_train_labels: batch_labels}
        _, l, prediction = session.run([optimizer, loss, train_prediction], feed_dict=feed_dict)
        if steps % 500 == 0:
            print('Minibatch loss at step {}: {}'.format(steps, l))
            print('Minibatch accuracy: {:.1f} '.format(accuracy(prediction, batch_labels)))
            print('Validation accuracy: {:.1f}'.format(accuracy(valid_prediction.eval(), valid_labels)))
    print('Test accuracy: {:.1f}'.format(accuracy(test_prediction.eval(), test_labels)))
train_datasets_2 = train_datasets[:500, :]
train_labels_2 = train_labels[:500, :]
with tf.Session(graph=graph) as session:
    tf.initialize_all_variables().run()
    print('Initialized')
    for steps in range(num_steps):
        offset = steps * batch_size % (train_labels_2.shape[0] - batch_size)
        batch_data = train_datasets_2[offset:offset + batch_size, :]
        batch_labels = train_labels_2[offset:offset + batch_size, :]
        feed_dict = {tf_train_dataset: batch_data, tf_train_labels: batch_labels}
        _, l, prediction = session.run([optimizer, loss, train_prediction], feed_dict=feed_dict)
        if steps % 500 == 0:
            print('Minibatch loss at step {}: {}'.format(steps, l))
            print('Minibatch accuracy: {:.1f} '.format(accuracy(prediction, batch_labels)))
            print('Validation accuracy: {:.1f}'.format(accuracy(valid_prediction.eval(), valid_labels)))
    print('Test accuracy: {:.1f}'.format(accuracy(test_prediction.eval(), test_labels)))
num_nodes = 1024
batch_size = 128
beta = 0.01
graph = tf.Graph()
with tf.Session(graph=graph) as session:
    tf_train_dataset = tf.placeholder(tf.float32, shape=(batch_size, image_size * image_size))
    tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
    tf_valid_dataset = tf.constant(valid_datasets)
    tf_test_dataset = tf.constant(test_dataset)
    weights_1 = tf.Variable(tf.truncated_normal([image_size * image_size, num_labels]))
    baises_1 = tf.Variable(tf.zeros([num_nodes]))
    weights_2 = tf.Variable(tf.truncated_normal([num_nodes, num_labels]))
    baises_2 = tf.Variable(tf.zeros([num_labels]))
    logits_1 = tf.matmul(tf_train_dataset, weights_1) + baises_1
    relu_layer = tf.nn.relu(logits_1)
    keep_prob = tf.placeholder('float')
    relu_layer_dropout = tf.nn.dropout(relu_layer, keep_prob)
    logits_2 = tf.matmul(relu_layer_dropout, weights_2) + baises_2
    loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits=logits_2, labels=tf_train_labels))
    regularizers = tf.nn.l2_loss(weights_1) + tf.nn.l2_loss(weights_2)
    loss = tf.reduce_mean(loss + beta * regularizers)
    optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
    train_prediction = tf.nn.softmax(logits_2)
    logits_1 = tf.matmul(tf_valid_dataset, weights_1) + baises_1
    relu_layer = tf.nn.relu(logits_1)
    logits_2 = tf.matmul(relu_layer, weights_2) + baises_2
    valid_prediction = tf.nn.softmax(logits_2)
    logits_1 = tf.matmul(tf_test_dataset, weights_1) + biases_1
    relu_layer = tf.nn.relu(logits_1)
    logits_2 = tf.matmul(relu_layer, weights_2) + biases_2
    test_prediction = tf.nn.softmax(logits_2)
num_steps = 3001
with tf.Session(graph=graph) as session:
    tf.initialize_all_variables().run()
    print('Initialised')
    for steps in range(num_steps):
        offset = steps * batch_size % (train_labels.shape[0] - batch_size)
        batch_data = train_datasets[offset:offset + batch_size, :]
        batch_labels = train_labels[offset:offset + batch_size, :]
        feed_dict = {tf_train_dataset: batch_data, tf_train_labels: batch_labels, keep_prob: 0.5}
        _, l, predictions = session.run([optimizer, loss, train_prediction], feed_dict=feed_dict)
        if step % 500 == 0:
            print('Minibatch loss at step {}: {}'.format(step, l))
            print('Minibatch accuracy: {:.1f}'.format(accuracy(predictions, batch_labels)))
            print('Validation accuracy: {:.1f}'.format(accuracy(valid_prediction.eval(), valid_labels)))
    print('Test accuracy: {:.1f}'.format(accuracy(test_prediction.eval(), test_labels)))
