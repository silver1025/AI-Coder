import tensorflow as tf
import numpy as np
import logging


class CNN:
    """
  Convolutional Neural Network model.
  """

    def __init__(self, num_actions, observation_shape, verbose=False):
        """
    Initialize the CNN model with a set of parameters.
    Args:
      params: a dictionary containing values of the models' parameters.
    """
        self.verbose = verbose
        self.num_actions = num_actions
        self.observation_shape = observation_shape[0]
        self.lr = 0.0001
        self.reg = 0.001
        self.hidden_size = 400
        self.session = self.create_model()

    def add_placeholders(self):
        input_placeholder = tf.placeholder(tf.float32, shape=(None, self.observation_shape))
        labels_placeholder = tf.placeholder(tf.float32, shape=(None,))
        actions_placeholder = tf.placeholder(tf.float32, shape=(None, self.num_actions))
        return input_placeholder, labels_placeholder, actions_placeholder

    def nn(self, input_obs):
        with tf.name_scope('Layer1') as scope:
            W1shape = [self.observation_shape, self.hidden_size]
            W1 = tf.get_variable('W1', shape=W1shape)
            bshape = [1, self.hidden_size]
            b1 = tf.get_variable('b1', shape=bshape, initializer=tf.constant_initializer(0.0))
        with tf.name_scope('Layer3') as scope:
            W3shape = [self.hidden_size, 12]
            W3 = tf.get_variable('W3', shape=W3shape)
            bshape = [1, 12]
            b3 = tf.get_variable('b3', shape=bshape, initializer=tf.constant_initializer(0.0))
        with tf.name_scope('OutputLayer') as scope:
            Ushape = [12, self.num_actions]
            U = tf.get_variable('U', shape=Ushape)
            b3shape = [1, self.num_actions]
            b4 = tf.get_variable('b4', shape=b3shape, initializer=tf.constant_initializer(0.0))
        xW = tf.matmul(input_obs, W1)
        h = tf.nn.softsign(tf.add(xW, b1))
        xW = tf.matmul(h, W3)
        h = tf.nn.softsign(tf.add(xW, b3))
        hU = tf.matmul(h, U)
        out = tf.add(hU, b4)
        reg = self.reg * (tf.reduce_sum(tf.square(W1)) + tf.reduce_sum(tf.square(W3)) + tf.reduce_sum(tf.square(U)))
        return out, reg

    def create_model(self):
        """
    The model definition.
    """
        self.input_placeholder, self.labels_placeholder, self.actions_placeholder = self.add_placeholders()
        outputs, reg = self.nn(self.input_placeholder)
        self.predictions = outputs
        self.q_vals = tf.reduce_sum(tf.mul(self.predictions, self.actions_placeholder), 1)
        self.loss = tf.reduce_sum(tf.square(self.labels_placeholder - self.q_vals)) + reg
        optimizer = tf.train.AdamOptimizer(learning_rate=self.lr, use_locking=True)
        self.train_op = optimizer.minimize(self.loss)
        init = tf.initialize_all_variables()
        session = tf.Session()
        session.run(init)
        return session

    def train_step(self, Xs, ys, actions):
        """
    Updates the CNN model with a mini batch of training examples.
    """
        loss, _, prediction_probs, q_values = self.session.run([self.loss, self.train_op, self.predictions, self.q_vals], feed_dict={self.input_placeholder: Xs, self.labels_placeholder: ys, self.actions_placeholder: actions})

    def predict(self, observation):
        """
    Predicts the rewards for an input observation state.
    Args:
      observation: a numpy array of a single observation state
    """
        loss, prediction_probs = self.session.run([self.loss, self.predictions], feed_dict={self.input_placeholder: observation, self.labels_placeholder: np.zeros(len(observation)), self.actions_placeholder: np.zeros((len(observation), self.num_actions))})
        return prediction_probs
