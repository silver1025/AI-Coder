from read_data import *
from time import time
import tensorflow as tf
batch_size = 128
hidden_nodes = 2048
hidden_nodes_l2 = 512
starter_learn_rate = 0.5
reg_beta = 0.002
num_steps = 5001


def train_three_layer(X, use_dropout):
    y1 = tf.nn.relu(tf.matmul(X, W1) + b1)
    y2 = None
    if use_dropout:
        y1d = tf.nn.dropout(y1, input_keep_prob)
        y2 = tf.nn.relu(tf.matmul(y1d, W2) + b2)
    else:
        y2 = tf.nn.relu(tf.matmul(y1, W2) + b2)
    y3 = None
    if use_dropout:
        y2d = tf.nn.dropout(y2, train_keep_prob)
        y3 = tf.nn.relu(tf.matmul(y2d, W3) + b3)
    else:
        y3 = tf.nn.relu(tf.matmul(y2, W3) + b3)
    return y3


graph = tf.Graph()
with graph.as_default():
    tf_train_dataset = tf.placeholder(tf.float32, shape=(batch_size, image_size * image_size))
    tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
    tf_valid_dataset = tf.constant(valid_dataset)
    tf_test_dataset = tf.constant(test_dataset)
    input_keep_prob = tf.placeholder('float')
    train_keep_prob = tf.placeholder('float')
    W1 = tf.Variable(tf.truncated_normal([image_size * image_size, hidden_nodes], stddev=0.03))
    b1 = tf.Variable(tf.zeros([hidden_nodes]))
    W2 = tf.Variable(tf.truncated_normal([hidden_nodes, hidden_nodes_l2], stddev=0.01))
    b2 = tf.Variable(tf.zeros([hidden_nodes_l2]))
    W3 = tf.Variable(tf.truncated_normal([hidden_nodes_l2, num_labels], stddev=0.01))
    b3 = tf.Variable(tf.zeros([num_labels]))
    y_train = train_three_layer(tf_train_dataset, True)
    y_valid = train_three_layer(tf_valid_dataset, True)
    y_test = train_three_layer(tf_test_dataset, True)
    loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(y_train, tf_train_labels))
    regularizers = tf.nn.l2_loss(W1) + tf.nn.l2_loss(b1) + tf.nn.l2_loss(W2) + tf.nn.l2_loss(b2)
    loss += reg_beta * regularizers
    loss_summary = tf.scalar_summary('loss', loss)
    global_step = tf.Variable(0)
    learn_rate = tf.train.exponential_decay(starter_learn_rate, global_step, 500, 0.96)
    optimizer = tf.train.GradientDescentOptimizer(learn_rate).minimize(loss, global_step=global_step)
    merged = tf.merge_all_summaries()
train_prediction = tf.nn.softmax(y_train)
valid_prediction = tf.nn.softmax(y_valid)
test_prediction = tf.nn.softmax(y_test)
with tf.Session(graph=graph) as session:
    writer = tf.train.SummaryWriter('/tmp/notmnist_logs', session.graph_def)
    tf.initialize_all_variables().run()
    print('Initialized')
    t0 = time()
    for step in range(num_steps):
        offset = step * batch_size % (train_labels.shape[0] - batch_size)
        batch_data = train_dataset[offset:offset + batch_size, :]
        batch_labels = train_labels[offset:offset + batch_size, :]
        feed_dict = {tf_train_dataset: batch_data, tf_train_labels: batch_labels, input_keep_prob: 0.9, train_keep_prob: 0.5}
        _, l, predictions, merged_summary, lr = session.run([optimizer, loss, train_prediction, merged, learn_rate], feed_dict=feed_dict)
        writer.add_summary(merged_summary, step)
        if step % 500 == 0:
            print('Minibatch loss at step %d: %f' % (step, l))
            print('Minibatch accuracy: %.1f%%' % accuracy(train_prediction.eval(feed_dict={tf_train_dataset: batch_data, tf_train_labels: batch_labels, input_keep_prob: 1.0, train_keep_prob: 1.0}), batch_labels))
            print('Learn rate: ', lr)
            print('Validation accuracy: %.1f%%' % accuracy(valid_prediction.eval(feed_dict={input_keep_prob: 1.0, train_keep_prob: 1.0}), valid_labels))
    print('Test accuracy: %.1f%%' % accuracy(test_prediction.eval(feed_dict={input_keep_prob: 1.0, train_keep_prob: 1.0}), test_labels))
    print('Elapsed time:  %.1f seconds' % (time() - t0))
