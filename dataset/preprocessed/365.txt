"""
Created on Sun Aug 12 15:18:20 2018

@author: Arc
"""
from __future__ import print_function
import numpy as np
import tensorflow as tf
from six.moves import cPickle as pickle
pickle_file = 'notMNIST.pickle'
with open(pickle_file, 'rb') as f:
    save = pickle.load(f)
    train_dataset = save['train_dataset']
    train_labels = save['train_labels']
    valid_dataset = save['valid_dataset']
    valid_labels = save['valid_labels']
    test_dataset = save['test_dataset']
    test_labels = save['test_labels']
    del save
    print('Training set', train_dataset.shape, train_labels.shape)
    print('Validation set', valid_dataset.shape, valid_labels.shape)
    print('Test set', test_dataset.shape, test_labels.shape)
image_size = 28
num_labels = 10


def reformat(dataset, labels):
    dataset = dataset.reshape((-1, image_size * image_size)).astype(np.float32)
    labels = (np.arange(num_labels) == labels[:, (None)]).astype(np.float32)
    return dataset, labels


train_dataset, train_labels = reformat(train_dataset, train_labels)
valid_dataset, valid_labels = reformat(valid_dataset, valid_labels)
test_dataset, test_labels = reformat(test_dataset, test_labels)
print('Training set', train_dataset.shape, train_labels.shape)
print('Validation set', valid_dataset.shape, valid_labels.shape)
print('Test set', test_dataset.shape, test_labels.shape)
beta = 0.008
train_subset = 10000
graph = tf.Graph()
with graph.as_default():
    tf_train_dataset = tf.constant(train_dataset[:train_subset, :])
    tf_train_labels = tf.constant(train_labels[:train_subset])
    tf_valid_dataset = tf.constant(valid_dataset)
    tf_test_dataset = tf.constant(test_dataset)
    weights = tf.Variable(tf.truncated_normal([image_size * image_size, num_labels]))
    biases = tf.Variable(tf.zeros([num_labels]))
    logits = tf.matmul(tf_train_dataset, weights) + biases
    loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits_v2(labels=tf_train_labels, logits=logits))
    l2_loss = tf.nn.l2_loss(weights)
    loss = loss + beta * l2_loss
    optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
    train_prediction = tf.nn.softmax(logits)
    valid_prediction = tf.nn.softmax(tf.matmul(tf_valid_dataset, weights) + biases)
    test_prediction = tf.nn.softmax(tf.matmul(tf_test_dataset, weights) + biases)
num_steps = 801


def accuracy(predictions, labels):
    return 100.0 * np.sum(np.argmax(predictions, 1) == np.argmax(labels, 1)) / predictions.shape[0]


with tf.Session(graph=graph) as session:
    tf.global_variables_initializer().run()
    print('Initialized')
    for step in range(num_steps):
        _, l, predictions = session.run([optimizer, loss, train_prediction])
        if step % 100 == 0:
            print('Loss at step %d: %f' % (step, l))
            print('Training accuracy: %.1f%%' % accuracy(predictions, train_labels[:train_subset, :]))
            print('Validation accuracy: %.1f%%' % accuracy(valid_prediction.eval(), valid_labels))
    print('Test accuracy: %.1f%%' % accuracy(test_prediction.eval(), test_labels))
beta = 0.018
batch_size = 128
graph = tf.Graph()
with graph.as_default():
    tf_train_dataset = tf.placeholder(tf.float32, shape=(batch_size, image_size * image_size))
    tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
    tf_valid_dataset = tf.constant(valid_dataset)
    tf_test_dataset = tf.constant(test_dataset)
    hidden_nodes = 1024
    hidden_weights = tf.Variable(tf.truncated_normal([image_size * image_size, hidden_nodes]))
    hidden_biases = tf.Variable(tf.zeros([hidden_nodes]))
    weights = tf.Variable(tf.truncated_normal([hidden_nodes, num_labels]))
    biases = tf.Variable(tf.zeros([num_labels]))
    hidden_layer = tf.add(tf.matmul(tf_train_dataset, hidden_weights), hidden_biases)
    hidden_layer = tf.nn.relu(hidden_layer)
    logits = tf.matmul(hidden_layer, weights) + biases
    loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits_v2(labels=tf_train_labels, logits=logits))
    l2_loss = tf.nn.l2_loss(hidden_weights) + tf.nn.l2_loss(weights)
    loss = loss + beta * l2_loss
    optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
    train_prediction = tf.nn.softmax(logits)
    valid_hidden_layer = tf.nn.relu(tf.add(tf.matmul(tf_valid_dataset, hidden_weights), hidden_biases))
    valid_prediction = tf.nn.softmax(tf.matmul(valid_hidden_layer, weights) + biases)
    test_hidden_layer = tf.nn.relu(tf.add(tf.matmul(tf_test_dataset, hidden_weights), hidden_biases))
    test_prediction = tf.nn.softmax(tf.matmul(test_hidden_layer, weights) + biases)
num_steps = 3001
with tf.Session(graph=graph) as session:
    tf.global_variables_initializer().run()
    print('Initialized')
    for step in range(num_steps):
        offset = step * batch_size % (train_labels.shape[0] - batch_size)
        batch_data = train_dataset[offset:offset + batch_size, :]
        batch_labels = train_labels[offset:offset + batch_size, :]
        feed_dict = {tf_train_dataset: batch_data, tf_train_labels: batch_labels}
        _, l, predictions = session.run([optimizer, loss, train_prediction], feed_dict=feed_dict)
        if step % 500 == 0:
            print('Minibatch loss at step %d: %f' % (step, l))
            print('Minibatch accuracy: %.1f%%' % accuracy(predictions, batch_labels))
            print('Validation accuracy: %.1f%%' % accuracy(valid_prediction.eval(), valid_labels))
    print('Test accuracy: %.1f%%' % accuracy(test_prediction.eval(), test_labels))
beta = 0.018
batch_size = 128
graph = tf.Graph()
with graph.as_default():
    tf_train_dataset = tf.placeholder(tf.float32, shape=(batch_size, image_size * image_size))
    tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
    tf_valid_dataset = tf.constant(valid_dataset)
    tf_test_dataset = tf.constant(test_dataset)
    hidden_nodes = 1024
    hidden_weights = tf.Variable(tf.truncated_normal([image_size * image_size, hidden_nodes]))
    hidden_biases = tf.Variable(tf.zeros([hidden_nodes]))
    weights = tf.Variable(tf.truncated_normal([hidden_nodes, num_labels]))
    biases = tf.Variable(tf.zeros([num_labels]))
    hidden_layer = tf.add(tf.matmul(tf_train_dataset, hidden_weights), hidden_biases)
    hidden_layer = tf.nn.relu(hidden_layer)
    logits = tf.matmul(hidden_layer, weights) + biases
    loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits_v2(labels=tf_train_labels, logits=logits))
    l2_loss = tf.nn.l2_loss(hidden_weights) + tf.nn.l2_loss(weights)
    loss = loss + beta * l2_loss
    optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
    train_prediction = tf.nn.softmax(logits)
    valid_hidden_layer = tf.nn.relu(tf.add(tf.matmul(tf_valid_dataset, hidden_weights), hidden_biases))
    valid_prediction = tf.nn.softmax(tf.matmul(valid_hidden_layer, weights) + biases)
    test_hidden_layer = tf.nn.relu(tf.add(tf.matmul(tf_test_dataset, hidden_weights), hidden_biases))
    test_prediction = tf.nn.softmax(tf.matmul(test_hidden_layer, weights) + biases)
num_steps = 3001
with tf.Session(graph=graph) as session:
    tf.global_variables_initializer().run()
    print('Initialized')
    for step in range(num_steps):
        offset_limit = 300
        offset = step * batch_size % offset_limit
        batch_data = train_dataset[offset:offset + batch_size, :]
        batch_labels = train_labels[offset:offset + batch_size, :]
        feed_dict = {tf_train_dataset: batch_data, tf_train_labels: batch_labels}
        _, l, predictions = session.run([optimizer, loss, train_prediction], feed_dict=feed_dict)
        if step % 500 == 0:
            print('Minibatch loss at step %d: %f' % (step, l))
            print('Minibatch accuracy: %.1f%%' % accuracy(predictions, batch_labels))
            print('Validation accuracy: %.1f%%' % accuracy(valid_prediction.eval(), valid_labels))
    print('Test accuracy: %.1f%%' % accuracy(test_prediction.eval(), test_labels))
beta = 0.001
batch_size = 128
graph = tf.Graph()
with graph.as_default():
    tf_train_dataset = tf.placeholder(tf.float32, shape=(batch_size, image_size * image_size))
    tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
    tf_valid_dataset = tf.constant(valid_dataset)
    tf_test_dataset = tf.constant(test_dataset)
    hidden_nodes = 1024
    hidden_weights = tf.Variable(tf.truncated_normal([image_size * image_size, hidden_nodes]))
    hidden_biases = tf.Variable(tf.zeros([hidden_nodes]))
    weights = tf.Variable(tf.truncated_normal([hidden_nodes, num_labels]))
    biases = tf.Variable(tf.zeros([num_labels]))
    hidden_layer = tf.add(tf.matmul(tf_train_dataset, hidden_weights), hidden_biases)
    hidden_layer = tf.nn.relu(hidden_layer)
    keep_prob = tf.placeholder(tf.float32)
    hidden_layer_dropout = tf.nn.dropout(hidden_layer, keep_prob)
    logits_training = tf.matmul(hidden_layer_dropout, weights) + biases
    logits = tf.matmul(hidden_layer, weights) + biases
    loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits_v2(labels=tf_train_labels, logits=logits_training))
    l2_loss = tf.nn.l2_loss(hidden_weights) + tf.nn.l2_loss(weights)
    loss = loss + beta * l2_loss
    optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
    train_prediction = tf.nn.softmax(logits)
    valid_hidden_layer = tf.nn.relu(tf.add(tf.matmul(tf_valid_dataset, hidden_weights), hidden_biases))
    valid_prediction = tf.nn.softmax(tf.matmul(valid_hidden_layer, weights) + biases)
    test_hidden_layer = tf.nn.relu(tf.add(tf.matmul(tf_test_dataset, hidden_weights), hidden_biases))
    test_prediction = tf.nn.softmax(tf.matmul(test_hidden_layer, weights) + biases)
num_steps = 14001
with tf.Session(graph=graph) as session:
    tf.global_variables_initializer().run()
    print('Initialized')
    for step in range(num_steps):
        offset = step * batch_size % (train_labels.shape[0] - batch_size)
        batch_data = train_dataset[offset:offset + batch_size, :]
        batch_labels = train_labels[offset:offset + batch_size, :]
        feed_dict = {tf_train_dataset: batch_data, tf_train_labels: batch_labels, keep_prob: 0.5}
        _, l, predictions = session.run([optimizer, loss, train_prediction], feed_dict=feed_dict)
        if step % 2000 == 0:
            print('Minibatch loss at step %d: %f' % (step, l))
            print('Minibatch accuracy: %.1f%%' % accuracy(predictions, batch_labels))
            print('Validation accuracy: %.1f%%' % accuracy(valid_prediction.eval(), valid_labels))
    print('Test accuracy: %.1f%%' % accuracy(test_prediction.eval(), test_labels))
beta = 0.001
batch_size = 128
graph = tf.Graph()
with graph.as_default():
    tf_train_dataset = tf.placeholder(tf.float32, shape=(batch_size, image_size * image_size))
    tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
    tf_valid_dataset = tf.constant(valid_dataset)
    tf_test_dataset = tf.constant(test_dataset)
    hidden_nodes = 1024
    hidden_weights = tf.Variable(tf.truncated_normal([image_size * image_size, hidden_nodes]))
    hidden_biases = tf.Variable(tf.zeros([hidden_nodes]))
    weights = tf.Variable(tf.truncated_normal([hidden_nodes, num_labels]))
    biases = tf.Variable(tf.zeros([num_labels]))
    hidden_layer = tf.add(tf.matmul(tf_train_dataset, hidden_weights), hidden_biases)
    hidden_layer = tf.nn.relu(hidden_layer)
    keep_prob = tf.placeholder(tf.float32)
    hidden_layer_training = tf.nn.dropout(hidden_layer, keep_prob)
    logits_training = tf.matmul(hidden_layer_training, weights) + biases
    logits = tf.matmul(hidden_layer, weights) + biases
    loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits_v2(labels=tf_train_labels, logits=logits_training))
    l2_loss = tf.nn.l2_loss(hidden_weights) + tf.nn.l2_loss(weights)
    loss = loss + beta * l2_loss
    global_step = tf.Variable(0)
    learning_rate = tf.train.exponential_decay(0.3, global_step, 1000, 0.9, staircase=True)
    optimizer = tf.train.GradientDescentOptimizer(learning_rate).minimize(loss, global_step=global_step)
    train_prediction = tf.nn.softmax(logits)
    valid_hidden_layer = tf.nn.relu(tf.add(tf.matmul(tf_valid_dataset, hidden_weights), hidden_biases))
    valid_prediction = tf.nn.softmax(tf.matmul(valid_hidden_layer, weights) + biases)
    test_hidden_layer = tf.nn.relu(tf.add(tf.matmul(tf_test_dataset, hidden_weights), hidden_biases))
    test_prediction = tf.nn.softmax(tf.matmul(test_hidden_layer, weights) + biases)
num_steps = 20001
with tf.Session(graph=graph) as session:
    tf.global_variables_initializer().run()
    print('Initialized')
    for step in range(num_steps):
        offset = step * batch_size % (train_labels.shape[0] - batch_size)
        batch_data = train_dataset[offset:offset + batch_size, :]
        batch_labels = train_labels[offset:offset + batch_size, :]
        feed_dict = {tf_train_dataset: batch_data, tf_train_labels: batch_labels, keep_prob: 0.5}
        _, l, predictions = session.run([optimizer, loss, train_prediction], feed_dict=feed_dict)
        if step % 1000 == 0:
            print('Minibatch loss at step %d: %f' % (step, l))
            print('Minibatch accuracy: %.1f%%' % accuracy(predictions, batch_labels))
            print('Validation accuracy: %.1f%%' % accuracy(valid_prediction.eval(), valid_labels))
    print('Test accuracy: %.1f%%' % accuracy(test_prediction.eval(), test_labels))
beta = 0.001
batch_size = 128
layer_depth = 5
graph = tf.Graph()
with graph.as_default():
    tf_train_dataset = tf.placeholder(tf.float32, shape=(batch_size, image_size * image_size))
    tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
    tf_valid_dataset = tf.constant(valid_dataset)
    tf_test_dataset = tf.constant(test_dataset)
    hidden_nodes = 1024
    stddev = np.sqrt(2 / hidden_nodes)
    weights0 = tf.Variable(tf.truncated_normal([image_size * image_size, hidden_nodes], stddev=stddev))
    biases0 = tf.Variable(tf.zeros([hidden_nodes]))
    hidden_nodes_pre = hidden_nodes
    hidden_weights = []
    hidden_biases = []
    for i in range(layer_depth - 2):
        if hidden_nodes_pre > 2:
            hidden_nodes_cur = int(hidden_nodes_pre // 2)
        else:
            hidden_nodes_cur == hidden_nodes_pre
        stddev = np.sqrt(2 / hidden_nodes_cur)
        hidden_weights.append(tf.Variable(tf.truncated_normal([hidden_nodes_pre, hidden_nodes_cur], stddev=stddev)))
        hidden_biases.append(tf.Variable(tf.zeros([hidden_nodes_cur])))
        hidden_nodes_pre = hidden_nodes_cur
    weights = tf.Variable(tf.truncated_normal([hidden_nodes_cur, num_labels]))
    biases = tf.Variable(tf.zeros([num_labels]))
    y0 = tf.add(tf.matmul(tf_train_dataset, weights0), biases0)
    y0 = tf.nn.relu(y0)
    y0_training = tf.nn.dropout(y0, 0.5)
    valid_y0 = tf.matmul(tf_valid_dataset, weights0) + biases0
    valid_y0 = tf.nn.relu(valid_y0)
    test_y0 = tf.matmul(tf_test_dataset, weights0) + biases0
    test_y0 = tf.nn.relu(test_y0)
    yi_training = y0_training
    hidden_layer = y0
    valid_hidden_layer = valid_y0
    test_hidden_layer = test_y0
    for i in range(layer_depth - 2):
        yi_training = tf.nn.relu(tf.matmul(yi_training, hidden_weights[i]) + hidden_biases[i])
        keep_prob = 0.5 * (1 + (i + 1) / (layer_depth - 1))
        hidden_layer_training = tf.nn.dropout(yi_training, keep_prob)
        hidden_layer = tf.nn.relu(tf.matmul(hidden_layer, hidden_weights[i]) + hidden_biases[i])
        valid_hidden_layer = tf.nn.relu(tf.matmul(valid_hidden_layer, hidden_weights[i]) + hidden_biases[i])
        test_hidden_layer = tf.nn.relu(tf.matmul(test_hidden_layer, hidden_weights[i]) + hidden_biases[i])
    logits_training = tf.matmul(hidden_layer_training, weights) + biases
    logits = tf.matmul(hidden_layer, weights) + biases
    valid_logits = tf.matmul(valid_hidden_layer, weights) + biases
    test_logits = tf.matmul(test_hidden_layer, weights) + biases
    loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits_v2(labels=tf_train_labels, logits=logits_training))
    l2_loss = tf.nn.l2_loss(weights0) + tf.nn.l2_loss(weights)
    for i in range(layer_depth - 2):
        l2_loss += tf.nn.l2_loss(hidden_weights[i])
    loss = loss + beta * l2_loss
    global_step = tf.Variable(0)
    learning_rate = tf.train.exponential_decay(0.1, global_step, 1000, 0.8, staircase=True)
    optimizer = tf.train.GradientDescentOptimizer(learning_rate).minimize(loss, global_step=global_step)
    train_prediction = tf.nn.softmax(logits)
    valid_prediction = tf.nn.softmax(valid_logits)
    test_prediction = tf.nn.softmax(test_logits)
num_steps = 18001
with tf.Session(graph=graph) as session:
    tf.global_variables_initializer().run()
    print('Initialized')
    for step in range(num_steps):
        offset = step * batch_size % (train_labels.shape[0] - batch_size)
        batch_data = train_dataset[offset:offset + batch_size, :]
        batch_labels = train_labels[offset:offset + batch_size, :]
        feed_dict = {tf_train_dataset: batch_data, tf_train_labels: batch_labels}
        _, l, predictions = session.run([optimizer, loss, train_prediction], feed_dict=feed_dict)
        if step % 500 == 0:
            print('Minibatch loss at step %d: %f' % (step, l))
            print('Minibatch accuracy: %.1f%%' % accuracy(predictions, batch_labels))
            print('Validation accuracy: %.1f%%' % accuracy(valid_prediction.eval(), valid_labels))
    print('Test accuracy: %.1f%%' % accuracy(test_prediction.eval(), test_labels))
