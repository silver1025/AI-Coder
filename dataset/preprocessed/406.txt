import matplotlib.pyplot as plt
import numpy as np
import tensorflow as tf
from six.moves import cPickle as pickle
pickle_file = 'notMNIST.pickle'
with open(pickle_file, 'rb') as f:
    save = pickle.load(f)
    train_dataset = save['train_dataset']
    train_labels = save['train_labels']
    valid_dataset = save['valid_dataset']
    valid_labels = save['valid_labels']
    test_dataset = save['test_dataset']
    test_labels = save['test_labels']
    del save
    print('Training set', train_dataset.shape, train_labels.shape)
    print('Validation set', valid_dataset.shape, valid_labels.shape)
    print('Test set', test_dataset.shape, test_labels.shape)
image_size = 28
num_labels = 10


def reformat(dataset, labels):
    dataset = dataset.reshape((-1, image_size * image_size)).astype(np.float32)
    labels = (np.arange(num_labels) == labels[:, (None)]).astype(np.float32)
    return dataset, labels


train_dataset, train_labels = reformat(train_dataset, train_labels)
valid_dataset, valid_labels = reformat(valid_dataset, valid_labels)
test_dataset, test_labels = reformat(test_dataset, test_labels)
print('Training set', train_dataset.shape, train_labels.shape)
print('Validation set', valid_dataset.shape, valid_labels.shape)
print('Test set', test_dataset.shape, test_labels.shape)


def accuracy(predictions, labels):
    return 100.0 * np.sum(np.argmax(predictions, 1) == np.argmax(labels, 1)) / predictions.shape[0]


batch_size = 128
graph = tf.Graph()
with graph.as_default():
    tf_train_dataset = tf.placeholder(tf.float32, shape=(batch_size, image_size * image_size))
    tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
    tf_valid_dataset = tf.constant(valid_dataset)
    tf_test_dataset = tf.constant(test_dataset)
    beta_regular = tf.placeholder(tf.float32)
    weights = tf.Variable(tf.truncated_normal([image_size * image_size, num_labels]))
    biases = tf.Variable(tf.zeros([num_labels]))
    logits = tf.matmul(tf_train_dataset, weights) + biases
    loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels=tf_train_labels, logits=logits))
    loss += beta_regular * tf.nn.l2_loss(weights)
    optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
    train_prediction = tf.nn.softmax(logits)
    valid_prediction = tf.nn.softmax(tf.matmul(tf_valid_dataset, weights) + biases)
    test_prediction = tf.nn.softmax(tf.matmul(tf_test_dataset, weights) + biases)
num_steps = 3001
with tf.Session(graph=graph) as session:
    tf.global_variables_initializer().run()
    print('Problem 1 : using Logistic Regression')
    print('Initialized')
    for step in range(num_steps):
        offset = step * batch_size % (train_labels.shape[0] - batch_size)
        batch_data = train_dataset[offset:offset + batch_size, :]
        batch_labels = train_labels[offset:offset + batch_size, :]
        feed_dict = {tf_train_dataset: batch_data, tf_train_labels: batch_labels, beta_regular: 0.01}
        _, l, predictions = session.run([optimizer, loss, train_prediction], feed_dict=feed_dict)
        if step % 500 == 0:
            print('Minibatch loss at step %d: %f' % (step, l))
            print('Minibatch accuracy: %.1f%%' % accuracy(predictions, batch_labels))
            print('Validation accuracy: %.1f%%' % accuracy(valid_prediction.eval(), valid_labels))
    print('Test accuracy: %.1f%%' % accuracy(test_prediction.eval(), test_labels))
batch_size = 128
hidden_layer_nodes = 1024
graph = tf.Graph()
with graph.as_default():
    tf_train_dataset = tf.placeholder(tf.float32, shape=(batch_size, image_size * image_size))
    tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
    tf_valid_dataset = tf.constant(valid_dataset)
    tf_test_dataset = tf.constant(test_dataset)
    beta_regular = tf.placeholder(tf.float32)
    weights_1 = tf.Variable(tf.truncated_normal([image_size * image_size, hidden_layer_nodes]))
    biases_1 = tf.Variable(tf.zeros([hidden_layer_nodes]))
    weights_2 = tf.Variable(tf.truncated_normal([hidden_layer_nodes, num_labels]))
    biases_2 = tf.Variable(tf.zeros([num_labels]))
    logits_1 = tf.matmul(tf_train_dataset, weights_1) + biases_1
    hidden_1 = tf.nn.relu(logits_1)
    logits_2 = tf.matmul(hidden_1, weights_2) + biases_2
    loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels=tf_train_labels, logits=logits_2))
    loss += beta_regular * (tf.nn.l2_loss(weights_1) + tf.nn.l2_loss(weights_2))
    optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
    train_prediction = tf.nn.softmax(logits_2)
    valid_prediction = tf.nn.softmax(tf.matmul(tf.nn.relu(tf.matmul(tf_valid_dataset, weights_1) + biases_1), weights_2) + biases_2)
    test_prediction = tf.nn.softmax(tf.matmul(tf.nn.relu(tf.matmul(tf_test_dataset, weights_1) + biases_1), weights_2) + biases_2)
num_steps = 3001
with tf.Session(graph=graph) as session:
    tf.global_variables_initializer().run()
    print('Problem 1 : using Nueral Network')
    print('Initialized')
    for step in range(num_steps):
        offset = step * batch_size % (train_labels.shape[0] - batch_size)
        batch_data = train_dataset[offset:offset + batch_size, :]
        batch_labels = train_labels[offset:offset + batch_size, :]
        feed_dict = {tf_train_dataset: batch_data, tf_train_labels: batch_labels, beta_regular: 0.001}
        _, l, predictions = session.run([optimizer, loss, train_prediction], feed_dict=feed_dict)
        if step % 500 == 0:
            print('Minibatch loss at step %d: %f' % (step, l))
            print('Minibatch accuracy: %.1f%%' % accuracy(predictions, batch_labels))
            print('Validation accuracy: %.1f%%' % accuracy(valid_prediction.eval(), valid_labels))
    print('Test accuracy: %.1f%%' % accuracy(test_prediction.eval(), test_labels))
batch_size = 128
hidden_layer_nodes = 1024
graph = tf.Graph()
with graph.as_default():
    tf_train_dataset = tf.placeholder(tf.float32, shape=(batch_size, image_size * image_size))
    tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
    tf_valid_dataset = tf.constant(valid_dataset)
    tf_test_dataset = tf.constant(test_dataset)
    beta_regular = tf.placeholder(tf.float32)
    weights_1 = tf.Variable(tf.truncated_normal([image_size * image_size, hidden_layer_nodes]))
    biases_1 = tf.Variable(tf.zeros([hidden_layer_nodes]))
    weights_2 = tf.Variable(tf.truncated_normal([hidden_layer_nodes, num_labels]))
    biases_2 = tf.Variable(tf.zeros([num_labels]))
    logits_1 = tf.matmul(tf_train_dataset, weights_1) + biases_1
    hidden_1 = tf.nn.relu(logits_1)
    logits_2 = tf.matmul(hidden_1, weights_2) + biases_2
    loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels=tf_train_labels, logits=logits_2))
    loss += beta_regular * (tf.nn.l2_loss(weights_1) + tf.nn.l2_loss(weights_2))
    optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
    train_prediction = tf.nn.softmax(logits_2)
    valid_prediction = tf.nn.softmax(tf.matmul(tf.nn.relu(tf.matmul(tf_valid_dataset, weights_1) + biases_1), weights_2) + biases_2)
    test_prediction = tf.nn.softmax(tf.matmul(tf.nn.relu(tf.matmul(tf_test_dataset, weights_1) + biases_1), weights_2) + biases_2)
num_steps = 3001
num_bacthes = 3
with tf.Session(graph=graph) as session:
    tf.global_variables_initializer().run()
    print('Problem 2 : using Nueral Network')
    print('Initialized')
    for step in range(num_steps):
        offset = step % num_bacthes
        batch_data = train_dataset[offset:offset + batch_size, :]
        batch_labels = train_labels[offset:offset + batch_size, :]
        feed_dict = {tf_train_dataset: batch_data, tf_train_labels: batch_labels, beta_regular: 0.001}
        _, l, predictions = session.run([optimizer, loss, train_prediction], feed_dict=feed_dict)
        if step % 500 == 0:
            print('Minibatch loss at step %d: %f' % (step, l))
            print('Minibatch accuracy: %.1f%%' % accuracy(predictions, batch_labels))
            print('Validation accuracy: %.1f%%' % accuracy(valid_prediction.eval(), valid_labels))
    print('Test accuracy: %.1f%%' % accuracy(test_prediction.eval(), test_labels))
batch_size = 128
hidden_layer_nodes = 1024
graph = tf.Graph()
with graph.as_default():
    tf_train_dataset = tf.placeholder(tf.float32, shape=(batch_size, image_size * image_size))
    tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
    tf_valid_dataset = tf.constant(valid_dataset)
    tf_test_dataset = tf.constant(test_dataset)
    beta_regular = tf.placeholder(tf.float32)
    keep_prob = tf.placeholder(tf.float32)
    weights_1 = tf.Variable(tf.truncated_normal([image_size * image_size, hidden_layer_nodes]))
    biases_1 = tf.Variable(tf.zeros([hidden_layer_nodes]))
    weights_2 = tf.Variable(tf.truncated_normal([hidden_layer_nodes, num_labels]))
    biases_2 = tf.Variable(tf.zeros([num_labels]))
    logits_1 = tf.matmul(tf_train_dataset, weights_1) + biases_1
    hidden_1 = tf.nn.relu(logits_1)
    drop_1 = tf.nn.dropout(hidden_1, keep_prob)
    logits_2 = tf.matmul(drop_1, weights_2) + biases_2
    loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels=tf_train_labels, logits=logits_2))
    loss += beta_regular * (tf.nn.l2_loss(weights_1) + tf.nn.l2_loss(weights_2))
    optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
    train_prediction = tf.nn.softmax(logits_2)
    valid_prediction = tf.nn.softmax(tf.matmul(tf.nn.relu(tf.matmul(tf_valid_dataset, weights_1) + biases_1), weights_2) + biases_2)
    test_prediction = tf.nn.softmax(tf.matmul(tf.nn.relu(tf.matmul(tf_test_dataset, weights_1) + biases_1), weights_2) + biases_2)
num_steps = 3001
num_bacthes = 3
with tf.Session(graph=graph) as session:
    tf.global_variables_initializer().run()
    print('Problem 3 : using Nueral Network')
    print('Initialized')
    for step in range(num_steps):
        offset = step % num_bacthes
        batch_data = train_dataset[offset:offset + batch_size, :]
        batch_labels = train_labels[offset:offset + batch_size, :]
        feed_dict = {tf_train_dataset: batch_data, tf_train_labels: batch_labels, beta_regular: 0.001, keep_prob: 0.5}
        _, l, predictions = session.run([optimizer, loss, train_prediction], feed_dict=feed_dict)
        if step % 500 == 0:
            print('Minibatch loss at step %d: %f' % (step, l))
            print('Minibatch accuracy: %.1f%%' % accuracy(predictions, batch_labels))
            print('Validation accuracy: %.1f%%' % accuracy(valid_prediction.eval(), valid_labels))
    print('Test accuracy: %.1f%%' % accuracy(test_prediction.eval(), test_labels))
batch_size = 128
hidden_layer_nodes_1 = 1024
hidden_layer_nodes_2 = 512
hidden_layer_nodes_3 = 256
graph = tf.Graph()
with graph.as_default():
    tf_train_dataset = tf.placeholder(tf.float32, shape=(batch_size, image_size * image_size))
    tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
    tf_valid_dataset = tf.constant(valid_dataset)
    tf_test_dataset = tf.constant(test_dataset)
    beta_regular = tf.placeholder(tf.float32)
    keep_prob = tf.placeholder(tf.float32)
    global_step = tf.Variable(0)
    weights_1 = tf.Variable(tf.truncated_normal([image_size * image_size, hidden_layer_nodes_1], stddev=np.sqrt(2.0 / image_size ** 2)))
    biases_1 = tf.Variable(tf.zeros([hidden_layer_nodes_1]))
    weights_2 = tf.Variable(tf.truncated_normal([hidden_layer_nodes_1, hidden_layer_nodes_2], stddev=np.sqrt(2.0 / hidden_layer_nodes_1)))
    biases_2 = tf.Variable(tf.zeros([hidden_layer_nodes_2]))
    weights_3 = tf.Variable(tf.truncated_normal([hidden_layer_nodes_2, hidden_layer_nodes_3], stddev=np.sqrt(2.0 / hidden_layer_nodes_2)))
    biases_3 = tf.Variable(tf.zeros([hidden_layer_nodes_3]))
    weights_4 = tf.Variable(tf.truncated_normal([hidden_layer_nodes_3, num_labels], stddev=np.sqrt(2.0 / hidden_layer_nodes_3)))
    biases_4 = tf.Variable(tf.zeros([num_labels]))
    logits_1 = tf.matmul(tf_train_dataset, weights_1) + biases_1
    hidden_1 = tf.nn.relu(logits_1)
    logits_2 = tf.matmul(hidden_1, weights_2) + biases_2
    hidden_2 = tf.nn.relu(logits_2)
    logits_3 = tf.matmul(hidden_2, weights_3) + biases_3
    hidden_3 = tf.nn.relu(logits_3)
    drop_3 = tf.nn.dropout(hidden_3, keep_prob)
    logits_4 = tf.matmul(drop_3, weights_4) + biases_4
    loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels=tf_train_labels, logits=logits_4))
    loss += beta_regular * (tf.nn.l2_loss(weights_1) + tf.nn.l2_loss(weights_2) + tf.nn.l2_loss(weights_3) + tf.nn.l2_loss(weights_4))
    learning_rate = tf.train.exponential_decay(0.5, global_step, 10000, 0.7, staircase=True)
    optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss, global_step=global_step)
    train_prediction = tf.nn.softmax(logits_4)
    valid_hidden_1 = tf.nn.relu(tf.matmul(tf_valid_dataset, weights_1) + biases_1)
    valid_hidden_2 = tf.nn.relu(tf.matmul(valid_hidden_1, weights_2) + biases_2)
    valid_hidden_3 = tf.nn.relu(tf.matmul(valid_hidden_2, weights_3) + biases_3)
    valid_prediction = tf.nn.softmax(tf.matmul(valid_hidden_3, weights_4) + biases_4)
    test_hidden_1 = tf.nn.relu(tf.matmul(tf_test_dataset, weights_1) + biases_1)
    test_hidden_2 = tf.nn.relu(tf.matmul(test_hidden_1, weights_2) + biases_2)
    test_hidden_3 = tf.nn.relu(tf.matmul(test_hidden_2, weights_3) + biases_3)
    test_prediction = tf.nn.softmax(tf.matmul(test_hidden_3, weights_4) + biases_4)
num_steps = 20001
with tf.Session(graph=graph) as session:
    tf.global_variables_initializer().run()
    print('Problem 4 : using Nueral Network')
    print('Initialized')
    for step in range(num_steps):
        offset = step * batch_size % (train_labels.shape[0] - batch_size)
        batch_data = train_dataset[offset:offset + batch_size, :]
        batch_labels = train_labels[offset:offset + batch_size, :]
        feed_dict = {tf_train_dataset: batch_data, tf_train_labels: batch_labels, beta_regular: 0.002, keep_prob: 0.5}
        _, l, predictions = session.run([optimizer, loss, train_prediction], feed_dict=feed_dict)
        if step % 500 == 0:
            print('Minibatch loss at step %d: %f' % (step, l))
            print('Minibatch accuracy: %.1f%%' % accuracy(predictions, batch_labels))
            print('Validation accuracy: %.1f%%' % accuracy(valid_prediction.eval(), valid_labels))
    print('Test accuracy: %.1f%%' % accuracy(test_prediction.eval(), test_labels))
