from read_data import *
from time import time
import tensorflow as tf
beta = 0.002


def train_two_layer(data, weights1, biases1, weights2, biases2):
    data_do = tf.nn.dropout(data, keep_prob=0.9)
    output1 = tf.matmul(data_do, weights1) + biases1
    relu1 = tf.nn.relu(output1)
    logits = tf.matmul(relu1, weights2) + biases2
    return logits


batch_size = 28
hidden_nodes = 1024
graph = tf.Graph()
with graph.as_default():
    tf_train_dataset = tf.placeholder(tf.float32, shape=(batch_size, image_size * image_size))
    tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
    tf_valid_dataset = tf.constant(valid_dataset)
    tf_test_dataset = tf.constant(test_dataset)
    weights1 = tf.Variable(tf.truncated_normal([image_size * image_size, hidden_nodes]))
    biases1 = tf.Variable(tf.zeros([hidden_nodes]))
    weights2 = tf.Variable(tf.truncated_normal([hidden_nodes, num_labels]))
    biases2 = tf.Variable(tf.zeros([num_labels]))
    logits = train_two_layer(tf_train_dataset, weights1, biases1, weights2, biases2)
    loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits, tf_train_labels))
    loss = np.add(loss, beta * tf.nn.l2_loss(weights1))
    optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
    train_prediction = tf.nn.softmax(logits)
    valid_prediction = tf.nn.softmax(train_two_layer(tf_valid_dataset, weights1, biases1, weights2, biases2))
    test_prediction = tf.nn.softmax(train_two_layer(tf_test_dataset, weights1, biases1, weights2, biases2))
num_steps = 2001
with tf.Session(graph=graph) as session:
    tf.initialize_all_variables().run()
    print('Initialized')
    t0 = time()
    for step in range(num_steps):
        offset = step * batch_size % (train_labels.shape[0] - batch_size)
        batch_data = train_dataset[offset:offset + batch_size, :]
        batch_labels = train_labels[offset:offset + batch_size, :]
        feed_dict = {tf_train_dataset: batch_data, tf_train_labels: batch_labels}
        _, l, predictions = session.run([optimizer, loss, train_prediction], feed_dict=feed_dict)
        if step % 500 == 0:
            print('Minibatch loss at step %d: %f' % (step, l))
            print('Minibatch accuracy: %.1f%%' % accuracy(predictions, batch_labels))
            print('Validation accuracy: %.1f%%' % accuracy(valid_prediction.eval(), valid_labels))
    print('')
    print('Session elapsed time for %d steps:  %f seconds' % (num_steps, round(time() - t0, 3)))
    print('Test accuracy: %.1f%%' % accuracy(test_prediction.eval(), test_labels))
