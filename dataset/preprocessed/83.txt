from __future__ import print_function
import numpy as np
import tensorflow as tf
from six.moves import cPickle as pickle


def reformat(dataset, labels):
    dataset = dataset.reshape((-1, image_size * image_size)).astype(np.float32)
    labels = (np.arange(num_labels) == labels[:, (None)]).astype(np.float32)
    return dataset, labels


def accuracy(predictions, labels):
    return 100.0 * np.sum(np.argmax(predictions, 1) == np.argmax(labels, 1)) / predictions.shape[0]


pickle_file = 'notMNIST.pickle'
with open(pickle_file, 'rb') as f:
    save = pickle.load(f)
    train_dataset = save['train_dataset']
    train_labels = save['train_labels']
    valid_dataset = save['valid_dataset']
    valid_labels = save['valid_labels']
    test_dataset = save['test_dataset']
    test_labels = save['test_labels']
    del save
    print('Training set', train_dataset.shape, train_labels.shape)
    print('Validation set', valid_dataset.shape, valid_labels.shape)
    print('Test set', test_dataset.shape, test_labels.shape)
image_size = 28
num_labels = 10
train_dataset, train_labels = reformat(train_dataset, train_labels)
valid_dataset, valid_labels = reformat(valid_dataset, valid_labels)
test_dataset, test_labels = reformat(test_dataset, test_labels)
print('Training set', train_dataset.shape, train_labels.shape)
print('Validation set', valid_dataset.shape, valid_labels.shape)
print('Test set', test_dataset.shape, test_labels.shape)
batch_size = 128
num_steps = 3001
graph = tf.Graph()
with graph.as_default():
    tf_train_dataset = tf.placeholder(tf.float32, shape=(batch_size, image_size * image_size))
    tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
    tf_valid_dataset = tf.constant(valid_dataset)
    tf_test_dataset = tf.constant(test_dataset)
    isL2 = tf.placeholder(tf.bool)
    weights = tf.Variable(tf.truncated_normal([image_size * image_size, num_labels]))
    biases = tf.Variable(tf.zeros([num_labels]))

    def prediction(mInput):
        logits = tf.matmul(mInput, weights) + biases
        return logits
    if isL2:
        loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(prediction(tf_train_dataset), tf_train_labels))
    else:
        loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(prediction(tf_train_dataset), tf_train_labels) + 0.05 * tf.nn.l2_loss(weights))
    optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
    train_prediction = tf.nn.softmax(prediction(tf_train_dataset))
    valid_prediction = tf.nn.softmax(prediction(tf_valid_dataset))
    test_prediction = tf.nn.softmax(prediction(tf_test_dataset))
with tf.Session(graph=graph) as session:
    tf.initialize_all_variables().run()
    print('Initialized')
    for step in range(num_steps):
        offset = step * batch_size % (train_labels.shape[0] - batch_size)
        batch_data = train_dataset[offset:offset + batch_size, :]
        batch_labels = train_labels[offset:offset + batch_size, :]
        feed_dict = {tf_train_dataset: batch_data, tf_train_labels: batch_labels, isL2: False}
        _, l, predictions = session.run([optimizer, loss, train_prediction], feed_dict=feed_dict)
        if step % 500 == 0:
            print('Minibatch loss at step %d: %f' % (step, l))
            print('Minibatch accuracy: %.1f%%' % accuracy(predictions, batch_labels))
            print('Validation accuracy: %.1f%%' % accuracy(valid_prediction.eval(), valid_labels))
    print('Test accuracy: %.1f%%' % accuracy(test_prediction.eval(), test_labels))
batch_size = 128
num_steps = 3001
graph = tf.Graph()
with graph.as_default():
    tf_train_dataset = tf.placeholder(tf.float32, shape=(batch_size, image_size * image_size))
    tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
    tf_valid_dataset = tf.constant(valid_dataset)
    tf_test_dataset = tf.constant(test_dataset)
    weights_h = tf.Variable(tf.truncated_normal([image_size * image_size, 1024]))
    biases_h = tf.Variable(tf.zeros([1024]))
    weights = tf.Variable(tf.truncated_normal([1024, num_labels]))
    biases = tf.Variable(tf.zeros([num_labels]))
    keep_prob = tf.placeholder(tf.float32)
    isDropout = tf.placeholder(tf.bool)
    isL2 = tf.placeholder(tf.bool)

    def prediction(mInput, dropout=False):
        layer1 = tf.nn.relu(tf.matmul(mInput, weights_h) + biases_h)
        if dropout:
            layer1 = tf.nn.dropout(layer1, keep_prob)
        logits = tf.matmul(layer1, weights) + biases
        return logits
    if isL2:
        loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(prediction(tf_train_dataset, isDropout), tf_train_labels))
    else:
        loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(prediction(tf_train_dataset, isDropout), tf_train_labels) + 0.01 * tf.nn.l2_loss(weights) + 0.01 * tf.nn.l2_loss(weights_h))
    global_step = tf.Variable(0)
    learning_rate = tf.train.exponential_decay(0.5, global_step, 100000, 0.96)
    optimizer = tf.train.GradientDescentOptimizer(learning_rate).minimize(loss, global_step=global_step)
    train_prediction = tf.nn.softmax(prediction(tf_train_dataset))
    valid_prediction = tf.nn.softmax(prediction(tf_valid_dataset))
    test_prediction = tf.nn.softmax(prediction(tf_test_dataset))
with tf.Session(graph=graph) as session:
    tf.initialize_all_variables().run()
    print('Initialized')
    for step in range(num_steps):
        offset = step * batch_size % (train_labels.shape[0] - batch_size)
        batch_data = train_dataset[offset:offset + batch_size, :]
        batch_labels = train_labels[offset:offset + batch_size, :]
        feed_dict = {tf_train_dataset: batch_data, tf_train_labels: batch_labels, keep_prob: 0.5, isL2: False, isDropout: False}
        _, l, predictions = session.run([optimizer, loss, train_prediction], feed_dict=feed_dict)
        if step % 500 == 0:
            print('Minibatch loss at step %d: %f' % (step, l))
            print('Minibatch accuracy: %.1f%%' % accuracy(predictions, batch_labels))
            print('Validation accuracy: %.1f%%' % accuracy(valid_prediction.eval(), valid_labels))
    print('Test accuracy: %.1f%%' % accuracy(test_prediction.eval(), test_labels))
